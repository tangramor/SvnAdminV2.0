module.exports = {
    en: 'English',
    cancel: 'Cancel',
    confirm: 'Confirm',
    save: 'Save',
    add: 'Add',
    edit: 'Edit',
    modify: 'Modify',
    confirmModify: 'Confirm Modify',
    delete: 'Delete',
    copy: 'Copy',
    action: 'Action',
    apply: 'Apply',
    close: 'Close',
    reset: 'Reset',
    view: 'View',
    config: 'Config',
    advance: 'Advanced',
    username: 'Username',
    password: 'Password',
    newPassword: 'New Password',
    confirmNewPassword: 'Confirm New Password',
    note: 'Note',
    serial: 'ID',
    status: 'Status',
    others: 'Others',
    success: 'Success',
    fail: 'Fail',
    createTime: 'Create Time',
    noDataNow: 'No data now',
    operator: 'Operator',
    退出登录成功: 'Logout success',
    roles: {
        管理员: 'Administrator',
        SVN用户: 'SVN User',
        子管理员: 'Sub-Admin',
        未知: 'Unknown',
    },
    backendTasks: {
        realtimeBackendTasks: 'Real-time Backend Tasks',
        currentTasks: 'Current Tasks',
        tasksInQueue: 'Tasks in Queue',
        historyTasks: 'History Tasks',
        noTasksRunning: 'Currently no background tasks running (if there is a backlog of tasks, please restart the daemon process to resolve the issue)',
        running: 'Running',
        waiting: 'Waiting',
        stopTask: 'Stop Task',
        cancelTask: 'Cancel Task',
        completed: 'Completed',
        cancelled: 'Cancelled',
        stopped: 'Stopped',
        viewLog: 'Log',
        taskLog: 'Task Log',
        taskName: 'Task Name',
        endTime: 'End Time',
        stopConfirm: 'Confirm to stop task',
        stopConfirmContent: 'Are you sure to stop this task?<br/>Cannot garrantee the task will be stopped successfully!',
    },
    errors: {
        contactAdmin: 'There was an error. Please contact the administrator.',
    },
    crond: {
        plsCheckCrondAtd: 'Please check if crond/atd is installed correctly and running',
        addCrond: 'Add Crond',
        searchByNameAndDesc: 'Search by task name and description',
        noNotice: 'No notice',
        successNotice: 'Only success notice',
        failureNotice: 'Only failure notice',
        allNotice: 'All notice',
        viewLog: 'Log',
        tipCheckByTrigger: 'Trigger the task manually to check the specific situation by analyzing the log',
        trigger: 'Trigger',
        type: 'Task Type',
        name: 'Task Name',
        cycleType: 'Task Cycle',
        changeRepo: 'Change Repository',
        notice: 'Notification',
        noticeSuccess: 'Success notification',
        noticeFailure: 'Failure notification',
        saveCount: 'Save Count',
        scriptContent: 'Script Content',
        inputScriptContent: 'Input script content',
        viewCrondLog: 'View Crond Log',
        logFile: 'Log File',
        dumpFull: 'Repository Backup [dump-full]',
        dumpDeltas: 'Repository Backup [dump-deltas]',
        hotcopyFull: 'Repository Backup [hotcopy-full]',
        hotcopyDeltas: 'Repository Backup [hotcopy-deltas]',
        allRepos: 'All Repositories',
        checkRepo: 'Check Repository',
        shellScript: 'Shell Script',
        syncSvnUser: 'Sync Svn User',
        syncSvnGroup: 'Sync Svn Group',
        syncSvnRepo: 'Sync Svn Repository',
        minute: 'Minute',
        minute_n:'Every N minutes',
        hour: 'Hourly',
        hour_n: 'Every N hours',
        day: 'Daily',
        day_n: 'Every N days',
        week: 'Weekly',
        month: 'Monthly',
        Monday: 'Monday',
        Tuesday: 'Tuesday',
        Wednesday: 'Wednesday',
        Thursday: 'Thursday',
        Friday: 'Friday',
        Saturday: 'Saturday',
        Sunday: 'Sunday',
        monthDay: 'Day {0}',
        dayDay: ' days',
        hourHour: ' hours',
        minuteMinute: ' minutes',
        cycleDesc: 'Cycle Description',
        lastExecTime: 'Last Execution Time',
        time: 'Time',
        content: 'Content',
        editCrond: 'Edit Crontab',
        deleteCrond: 'Delete Crontab',
        confirmDelCrond: 'Are you sure to delete this crontab task? All tasks related to this record will be deleted!',
        triggerCrond: 'Trigger Crontab',
        confirmTriggerCrond: 'Are you sure to trigger this crontab task? This operation can be used to test the correctness of the crontab task configuration!',
    },
    index: {
        loadStatus: 'Load Status',
        cpuLoad1Min: 'Last 1 minute average load:',
        cpuLoad5Min: 'Last 5 minute average load:',
        cpuLoad15Min: 'Last 15 minute average load:',
        cpuUsage: 'CPU Usage',
        memUsage: 'Memory Usage',
        cpuPhysical: ' Physical CPU',
        cpuCore: ' CPU Cores',
        cpuProcessor: ' Logical Processors',
        fileSystem: 'File System: ',
        fsSize: 'Size: ',
        fsUsed: 'Used: ',
        fsAvail: 'Available: ',
        fsPercent: 'Usage: ',
        mountOn: 'Mounted on: ',
        statistics: 'Statistics',
        svnRepo: 'SVN Repository',
        repoSize: 'Repository Size',
        repoBackup: 'Repository Backup',
        backupSize: 'Backup Size',
        logs: 'Logs',
        svnAlias: 'SVN Aliases',
        运行堵塞: 'Running Jammed',
        运行缓慢: 'Running Slow',
        运行正常: 'Running Normal',
        运行流畅: 'Running Quick',
        未知: 'Unknown',
    },
    layout: {
        SVNAdmin: 'SVNAdmin',
        backendTasks: 'Backend Tasks',
        仓库: 'Repository',
        信息统计: 'Statics',
        SVN仓库: 'SVN Repository',
        SVN用户: 'SVN Users',
        SVN分组: 'SVN Groups',
        运维: 'Operations',
        系统日志: 'System Logs',
        任务计划: 'Cron Tasks',
        高级: 'Advanced',
        个人中心: 'Personal',
        子管理员: 'Sub-Admin',
        系统配置: 'System Config',
        logout: 'Logout',
    },
    login: {
        inputUsername: 'Please enter username',
        inputPassword: 'Please enter password',
        inputCode: 'Please enter verification code',
        login: 'Login',
        usernameCannotBeEmpty: 'Username cannot be empty',
        passwordCannotBeEmpty: 'Password cannot be empty',
        codeCannotBeEmpty: 'Verification code cannot be empty',
        userAlreadyLogin: 'User already login，redirecting...',
        登陆成功: 'Login success',
        验证码错误: 'Login failed[Verification code error]',
        验证码失效: 'Login failed[Verification code expired]',
        验证码过期: 'Login failed[Verification code expired]',
        账号或密码错误: 'Login failed[Account or password error]',
        ldap账户未同步: 'Login failed[ldap account not synchronized]',
        ldap账户认证失败: 'Login failed[ldap account authentication failed]',
        ldap账户名不合法: 'Login failed[ldap account name is illegal]',
        用户已过期: 'Login failed[User has expired]',
        用户未同步: 'Login failed[User not synchronized]',
    },
    logs: {
        clearLogs: 'Clear Logs',
        exportLogs: 'Export Logs',
        logName: 'SVNAdmin2-Logs',
        searchLogs: 'Search Logs',
        logType: 'Log Type',
        content: 'Content',
        addTime: 'Add Time',
    },
    personal: {
        changePassword: 'Change Password',
        adminAccount: 'Admin Account',
        adminPassword: 'Admin Password',
        subadminAccount: 'Sub-Admin Account',
        subadminPassword: 'Sub-Admin Password',
        modifyAdminAccount: 'Modify Admin Account',
        newAccount: 'New Account',
        modifyAdminPassword: 'Modify Admin Password',
        modifySubadminPassword: 'Modify Sub-Admin Password',
    },
    repositoryGroup: {
        createGroup: 'Create SVN Group',
        syncGroupTip: 'Sync to update the SVN Group List',
        syncGroupList: 'Sync SVN Group List',
        searchGroup: 'Search SVN Group',
        groupMember: 'Member',
        groupName: 'Group Name',
        groupNameTip: 'Group name can only contain letters, numbers, hyphens, underscores, and dots.',
        addMember: 'Add Member',
        searchMember: 'Search Member',
        user: 'SVN User',
        group: 'SVN Group',
        aliase: 'SVN Aliase',
        scanGroupTitle: 'Step 1: Group Recognition',
        authzContent: `Please pasete the content of the authz file

Example:  

[groups]
group1=user1,user2,@group2
group2=user3
group3=user4,&aliase1`,
        scanGroup: 'Scan Group',
        includeUserCount: 'User Count',
        includeGroupCount: 'Group Count',
        includeAliaseCount: 'Aliase Count',
        objectType: 'Object Type',
        objectName: 'Object Name',
        editGroupName: 'Edit SVN Group Name',
        deleteGroup: 'Delete SVN Group',
        deleteGroupConfirm: 'Confirm to delete SVN Group?<br/>It will remove the group from all repositories and groups!<br/>This operation cannot be undone!',
        editGroupMember: 'Edit SVN Group Member',
    },
    repositoryInfo: {
        createRepo: 'Create SVN Repository',
        syncRepListTip: 'This operation will scan the valid repository list on the disk',
        syncRepList: 'Sync SVN Repository List',
        syncRepListInfoTip: 'This operation will scan the valid repository list on the disk and read the size and version information of each repository, which is a time-consuming operation',
        syncRepListInfo: 'Sync SVN Repository Info',
        syncUserRepListTip: 'Get the latest permission list by synchronizing',
        syncUserRepList: 'Sync User Repository List',
        checkAuthzTip: `Inadvertent configuration can cause the authz profile to become invalid
For example, in svnserve 1.10, an empty grouped authorization repository may cause the configuration to become invalid
If the configuration file fails, the user cannot check out or browse the configuration file
This tool allows you to check online for problems with your Autz profile
This feature relies on svnauthz-validate`,
        checkAuthz: 'authz validate',
        searchRepByNameDesc: 'Search by repository name or description',
        searchRepByName: 'Search by repository name',
        viewRaw: 'View Raw',
        repoName: 'Repository Name',
        repoNameTip: 'Repository name can only contain Chinese, letters, numbers, hyphens, underscores, and dots. It cannot start or end with a dot.',
        repoType: 'Repository Type',
        emptyRepo: 'Empty Repository',
        standardRepo: 'Repository with "trunk" "branches" "tags" folders',
        repoHooksAlert: 'If SVN client is triggering related hooks, update action may block or fail until client finishes related processes',
        repoHooks: 'Repo Hooks',
        introduce: 'Introduction',
        recommendHooks: 'Recommend Hooks',
        recommendHooksAlert1: 'If you want to display your commonly used hooks here, ',
        recommendHooksAlert2: 'Follow the steps below to add a pre-commit hook as an example:',
        recommendHooksAlert3: '1. Create a folder in the /home/svnadmin/hooks/ directory with any name',
        recommendHooksAlert4: '2. Create a file named hookDescription in the folder and write the main function description of the hook',
        recommendHooksAlert5: '3. Create a file named hookName in the folder and write the hook type',
        recommendHooksAlert6: '4. Create a file named pre-commit in the folder and write the hook script content',
        hookFilePlaceHolder: 'Please refer to the hook introduction for details',
        repoAttribute: 'Repository Attribute',
        repoBackup: 'Repository Backup',
        cannotUploadAlert: 'PHP file upload function is not enabled',
        backupByCrondDump: 'Backup by add crond task with svnadmin dump',
        backupNow: 'Backup Now',
        uploadBackup: 'Upload Backup',
        loadBackup: 'Load Backup',
        downloadBackup: 'Download Backup',
        resetUUID: 'Reset Repository UUID',
        inputUUID: 'Auto-generate new UUID if left blank',
        authzCheckResult: 'authz Check Result',
        repoLoadError: 'Repository Load Error',
        uploadBackupFile: 'Upload Backup File',
        uploadFile: 'Upload File',
        chooseFile: 'Choose File',
        uploadProgress: 'Upload Progress',
        filename: 'Filename',
        filesize: 'File Size',
        uploadStatus: 'Upload Status',
        chunkSize: 'Chunk Size',
        timeleft: 'Time Left',
        clearChunks: 'Clear Chunks',
        deleteOnMerge: 'Auto-delete chunks after merging',
        keepOnMerge: 'Do not delete chunks after merging',
        uploadControl: 'Upload Control',
        pause: 'Pause',
        pauseTips: 'You can resume the upload later - the uploaded chunks will not be deleted',
        repoRev: 'Revision',
        repoSize: 'Size',
        repoScan: 'Content',
        repoPri: 'Permission',
        pathFile: 'Path/File',
        secondPri: 'Second Authorize',
        resourceType: 'Type',
        resourceName: 'File',
        revAuthor: 'Author',
        revNum: 'Revision',
        revTime: 'Time',
        revLog: 'Log',
        fileEditTime: 'Modified Time',
        userPri: 'Permission',
        groupName: 'Group Name',
        groupPri: 'Permission',
        repoInfo: 'Repository Info',
        noDataTextRepCon: 'Since the svnserve service is not started, SVN users can only copy checkout addresses and cannot browse the repository content',
        copySuccess: 'Copied successfully',
        copyFailed: 'Failed to copy, please try manually',
        mergingChunks: 'Merging chunks',
        mergeSuccess: 'Merged successfully',
        chunksUploading: ' chunks uploading',
        hours: ' H',
        minutes: ' M',
        seconds: ' S',
        chunksMd5Calculating: ' chuns\' md5 under calculation',
        deleteFile: 'Delete File',
        deleteFileConfirm: 'Are you sure to delete this file?<br/>This operation cannot be undone!',
        modifyRepoName: 'Modify Repository Name',
        deleteRepo: 'Delete Repository',
        deleteRepoConfirm: 'Are you sure to delete this repository?<br/>This operation cannot be undone!<br/>If the repository is being used by other users, please make sure to stop the network transfer before deleting the repository!',
    },
    repositoryUser: {
        createUser: 'Create SVN User',
        userScan: 'Scan User',
        syncListTip: `1. You need to synchronize to get the latest user list
2. Users need to be synchronized to be able to login the system who are manually added to the passwd file`,
        syncList: 'Sync SVN User List',
        searchUser: 'Search SVN User',
        online: 'Online',
        offline: 'Offline',
        userNameAlert: 'Username can only contain letters, numbers, hyphens, underscores, and dots. It cannot start or end with a dot.',
        userRecogonize: 'Step 1: User Recognition',
        userPasswdTips: `Please paste the contents of the passwd file

If it is checked out by the svn protocol  (password plaintext), the following is an example:  

[users]
user1=passwd1
user2=passwd2

If it is checked out by the HTTP protocol (cipher redaction), the following is an example:  

user1:passwd1
user2:passwd2`,
        userScanResult: 'Step 2: Result Confirmation',
        enabled: 'Enabled',
        disabled: 'Disabled',
        userImport: 'Import',
        userImportResult: 'Step 3: Import Result',
        secondPriObj: 'Second Authorize Object',
        userPriPath: 'User Permission Path',
        lastLogin: 'Last Login',
        onlineStatus: 'Online Status',
        secondPriStatus: 'Second Authorize Status',
        secondPriTips: 'Second-level authorization allows SVN users to grant path permissions to ordinary SVN users',
        forExample: 'For example:',
        secondPriTips1: 'projects repository contains projects: project1 project2 ...',
        secondPriTips2: 'user1 user2 user3 is in charge of project1',
        secondPriTips3: 'user1 is the project mananger',
        secondPriTips4: 'user2 is developer',
        secondPriTips5: 'user2 is tester',
        secondPriTips6: '(1) Administrator enables the second authorization swith to user1 for this path',
        secondPriTips7: '(2) Administrator select the second-level authorization object (in this case, user2 user3)',
        secondPriTips8: 'user1 can authorize ordinary users to manage projects without administrator intervention',
        secondPriTips9: 'Closing the second-level authorization will synchronize the destruction of the second-level authorization object configured',
        userStatus: 'User Status',
        importResult: 'Import Result',
        reason: 'Reason',
        deleteUser: 'Delete User',
        deleteUserConfirm: 'Are you sure to delete this user?<br/>It will remove the user from all repositories and groups!<br/>This operation cannot be undone!',
        userPriPathList: 'Path Permission List',
    },
    subadmin: {
        createSubadmin: 'Create Sub-Admin',
        searchByNameAndDesc: 'Search by username and description',
        priTree: 'Config',
        online: 'Online',
        offline: 'Offline',
        resetPassword: 'Reset',
        delete: 'Delete',
        permissionConfig: 'Config Permission of Sub-Admin',
        reAuth: 'Please refer to the old permission tree and re-authorize the sub-admin for the new permission nodes.',
        oldPriTree: 'Old Permission Tree',
        newPriTree: 'Permission Tree',
        lastLogin: 'Last Login',
        onlineStatus: 'Online Status',
        sysPermission: 'System Permission',
        deleteSubadmin: 'Delete Sub-Admin',
        confirmDeleteSubadmin: 'Are you sure to delete this sub-admin? <br/>This operation cannot be undone!',
    },
}